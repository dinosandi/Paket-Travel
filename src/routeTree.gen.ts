/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ToursRouteImport } from './routes/tours'
import { Route as HomeRouteImport } from './routes/home'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as DestinationRouteImport } from './routes/Destination'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DestinationDetailDestinationIdRouteImport } from './routes/destination-detail.$destinationId'

const ToursRoute = ToursRouteImport.update({
  id: '/tours',
  path: '/tours',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const DestinationRoute = DestinationRouteImport.update({
  id: '/Destination',
  path: '/Destination',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DestinationDetailDestinationIdRoute =
  DestinationDetailDestinationIdRouteImport.update({
    id: '/destination-detail/$destinationId',
    path: '/destination-detail/$destinationId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Destination': typeof DestinationRoute
  '/contact': typeof ContactRoute
  '/home': typeof HomeRoute
  '/tours': typeof ToursRoute
  '/destination-detail/$destinationId': typeof DestinationDetailDestinationIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Destination': typeof DestinationRoute
  '/contact': typeof ContactRoute
  '/home': typeof HomeRoute
  '/tours': typeof ToursRoute
  '/destination-detail/$destinationId': typeof DestinationDetailDestinationIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/Destination': typeof DestinationRoute
  '/contact': typeof ContactRoute
  '/home': typeof HomeRoute
  '/tours': typeof ToursRoute
  '/destination-detail/$destinationId': typeof DestinationDetailDestinationIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Destination'
    | '/contact'
    | '/home'
    | '/tours'
    | '/destination-detail/$destinationId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Destination'
    | '/contact'
    | '/home'
    | '/tours'
    | '/destination-detail/$destinationId'
  id:
    | '__root__'
    | '/'
    | '/Destination'
    | '/contact'
    | '/home'
    | '/tours'
    | '/destination-detail/$destinationId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DestinationRoute: typeof DestinationRoute
  ContactRoute: typeof ContactRoute
  HomeRoute: typeof HomeRoute
  ToursRoute: typeof ToursRoute
  DestinationDetailDestinationIdRoute: typeof DestinationDetailDestinationIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/tours': {
      id: '/tours'
      path: '/tours'
      fullPath: '/tours'
      preLoaderRoute: typeof ToursRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Destination': {
      id: '/Destination'
      path: '/Destination'
      fullPath: '/Destination'
      preLoaderRoute: typeof DestinationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/destination-detail/$destinationId': {
      id: '/destination-detail/$destinationId'
      path: '/destination-detail/$destinationId'
      fullPath: '/destination-detail/$destinationId'
      preLoaderRoute: typeof DestinationDetailDestinationIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DestinationRoute: DestinationRoute,
  ContactRoute: ContactRoute,
  HomeRoute: HomeRoute,
  ToursRoute: ToursRoute,
  DestinationDetailDestinationIdRoute: DestinationDetailDestinationIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
